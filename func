import telebot
from telebot import types
import random
import json


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = 'your_token'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤
teachers_prog = {
    '–ü–æ—Ç—è–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞üêà': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –û–ò–¢, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏.',
    '–•–∞—Ä—á–µ–Ω–∫–æ –ù–∏–∫–∏—Ç–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–∏—áüòé': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python.',
    '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è.',
    '–ß–∏—Ö–∞—á—ë–≤ –ê—Ä—Ç–µ–º –ê—Ä–∫–∞–¥—å–µ–≤–∏—áüßîüèª‚Äç‚ôÇÔ∏è‚òÅÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.',
    '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞  –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
    '–§–æ—Ñ–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±–∏–æ–ª–æ–≥–∏–∏',
}

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –î–∏–∑–∞–π–Ω–µ—Ä–æ–≤
teachers_diz = {
    '–ü–æ—Ç—è–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞üêà': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –û–ò–¢, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏.',
    '–ò–≥–Ω–∞—Ç–µ–Ω–∫–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞‚úùÔ∏è': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤',
    '–ü—Ç–∞—à–∏–Ω—Å–∫–∏–π –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—áüõêü§†': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏, –æ–±—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–Ω–æ–≤ Photoshop adapt',
    '–ö–ª–∏–º–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—å—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞ü¶™üö∑üìµ': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏',
    '–ú–∞–º–µ–¥–æ–≤–∞ –ù–∞—Ä–≥–∏–∑ –ú–µ—Ö–º–∞–Ω–æ–≤–Ω–∞üë©‚Äçüî¨': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ö–∏–º–∏–∏',
    '–ß–∏–Ω–¥—è–π–∫–∏–Ω–∞  –ú–∞—Ä–∏–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ü¶Ö': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
}

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
REVIEW_FILE = 'review.json'

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.row('/review –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–°–∞–π—Ç –∞–∫–∞–¥–µ–º–∏–∏')
    markup.row('—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π', '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
    markup.row('–æ—Ç–∑—ã–≤—ã –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö')
    return markup





# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'main', '—Å—Ç–∞—Ä—Ç'])
def start_command(message):
    bot.send_message(message.chat.id,
                   f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ GuruBot {message.from_user.first_name}!\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö, –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥ –∏ —É—á–µ–±–Ω—ã–µ –ø–æ—Å–æ–±–∏—è!',
                     reply_markup=main_menu())




# –ö–æ–º–∞–Ω–¥–∞ /teacher
@bot.message_handler(regexp=r'^—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π$')
def list_teachers(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    prog_button = types.InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã", callback_data="prog")
    diz_button = types.InlineKeyboardButton(text="–î–∏–∑–∞–π–Ω–µ—Ä—ã", callback_data="diz")
    markup.add(prog_button, diz_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: True)
def handle_teacher_button(call):
    for teacher, data in [(t, str(hash(t))) for t in teachers_prog | teachers_diz]:
        if call.data == data:
            info = teachers_prog.get(teacher, teachers_diz.get(teacher))
            break
    else:
        info = None

    if info:
        bot.edit_message_text(f"{info}", chat_id=call.message.chat.id, message_id=call.message.message_id,
                            reply_markup=go_back())

    if call.data == "go_back":
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.send_message(call.message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_menu())





# –ö–æ–º–∞–Ω–¥–∞ /main
@bot.message_handler(commands=['main'])
def go_to_main_menu(message):
    bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_menu())




# –ö–æ–º–∞–Ω–¥–∞ /review
@bot.message_handler(commands=['review', '–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤' ])
def review_command(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    buttons = [types.KeyboardButton(teacher) for teacher in teachers_prog | teachers_diz]
    markup.add(*buttons)

    bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ:', reply_markup=markup)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(func=lambda m: m.text in teachers_prog or m.text in teachers_diz and m.content_type == 'text')
def handle_review(message):
    teacher = message.text
    bot.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ {teacher}:')
    bot.register_next_step_handler(message, save_review, teacher)

import json

def save_review(message, teacher):
    review = message.text
    user_fullname = f'{message.from_user.first_name} {message.from_user.last_name}'
    with open(REVIEW_FILE, 'a', encoding='utf-8') as file:
        file.write(f'{{"teacher": "{teacher}", "user_fullname": "{user_fullname}", "review": "{review}"}}\n')

    bot.send_message(message.chat.id, f'–í–∞—à –æ—Ç–∑—ã–≤ –æ {teacher}:\n{review}\n–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', reply_markup=types.ReplyKeyboardRemove())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def go_to_main_menu_from_button(message):
    bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_menu())
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def go_back():
    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="go_back")
    markup.add(back_button)
    return markup


# –ö–æ–º–∞–Ω–¥–∞ /site
@bot.message_handler(regexp=r'^–°–∞–π—Ç –∞–∫–∞–¥–µ–º–∏–∏$')
def academy_site(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç (/site)", url='https://journal.top-academy.ru')
    markup.add(button)

    bot.send_message(chat_id=message.chat.id, text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data in ['prog', 'diz'])
def handle_category_button(call):
    global teachers_dict
    if call.data == 'prog':
        teachers_dict = teachers_prog
    elif call.data == 'diz':
        teachers_dict = teachers_diz

    markup = types.InlineKeyboardMarkup(row_width=1)

    for teacher in teachers_dict.keys():
        callback_data = str(hash(teacher))
        button = types.InlineKeyboardButton(text=teacher, callback_data=callback_data)
        markup.add(button)

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", chat_id=call.message.chat.id, message_id=call.message.message_id,
                         reply_markup=markup)




# –ö–æ–º–∞–Ω–¥–∞ /book
@bot.message_handler(regexp=r'^–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã$')
def materials_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('GitHub', url='https://github.com'))
    markup.add(types.InlineKeyboardButton('Tilda', url='https://tilda.cc/ru/'))
    markup.add(types.InlineKeyboardButton('Microsoft 365', url='https://www.microsoft365.com/'))
    markup.add(types.InlineKeyboardButton('Python Online (Programiz.pro)', url='https://programiz.pro/ide/python'))

    bot.send_message(
        chat_id=message.chat.id,
        text=
        "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —É—á–µ–±–µ:</b>\n"
        "<em>GitHub ‚Äî –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä</em>\n"
        "<em>Tilda (—Ç–∏–ª—å–¥–∞) ‚Äî –≤–µ–±-—Å–∞–π—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–æ–≤</em>\n"
        "<em>Microsoft 365 ‚Äî –æ–Ω–ª–∞–π–Ω —Å–∞–π—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Word, Excel –∏ —Ç.–ø.</em>\n"
        "<em>Python Online –æ—Ç Programiz ‚Äî —ç—Ç–æ –æ–Ω–ª–∞–π–Ω –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–∞ Python!</em>",
        reply_markup=go_back(),
        parse_mode='html'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.send_message(message.chat.id, '–í–∞—É—É—É—É—É—É—É –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é? üòä', reply_markup=get_yes_no_keyboard())



# –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏ –∏—Ö —à–∞–Ω—Å—ã
photos = {
    './photo_1.jpeg': 0.25,
    './photo_2.jpeg': 0.50,
    './photo_3.jpeg': 0.75,
}


def get_yes_no_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    yes_button = telebot.types.KeyboardButton('–î–∞‚ù§Ô∏è‚Äçüî•   ')
    no_button = telebot.types.KeyboardButton('–ù–µ—Çüò≠')
    markup.add(yes_button, no_button)
    return markup


def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
    markup.add(btn1)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start_command(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
def handle_send_photo_request(message):
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞—é –≤–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=None)


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.reply_to(message, '–í–∞—É—É—É—É—É—É—É –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ! –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π —Ä–∏—Å—É–Ω–æ–∫ü§©?',
                 reply_markup=get_yes_no_keyboard())

def choose_photo_with_chance():
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤"""
    rand_value = random.random()  # –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1

    for path, chance in photos.items():
        if rand_value <= chance:
            return path


@bot.message_handler(func=lambda message: message.text.startswith('–î–∞‚ù§Ô∏è‚Äçüî•'))
def handle_da_response(message):
    chosen_path = choose_photo_with_chance()

    if chosen_path is not None:
        with open(chosen_path, 'rb') as photo_file:
            bot.send_photo(message.chat.id, photo_file)
    else:
        bot.send_message(message.chat.id, '–£–¥–∞—á–∞ –æ–±–æ—à–ª–∞ –≤–∞—Å —Å—Ç–æ—Ä–æ–Ω–æ–π ,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üòò!')


@bot.message_handler(func=lambda message: message.text.startswith('–ù–µ—Çüò≠'))
def handle_net_response(message):
    bot.send_message(message.chat.id, 'üò≠ –í—ã –º–µ–Ω—è —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∏ -Rep üò≠\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ')


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(commands=['all_reviews'])
def get_all_reviews(message):
    with open(REVIEW_FILE, 'r', encoding='utf-8') as file:
        all_reviews = json.load(file)
        for review in all_reviews:
            teacher = review['teacher']
            user_fullname = review['user_fullname']
            review_text = review['review']

            formatted_review = f'–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n' \
                               f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_fullname}\n' \
                               f'–û—Ç–∑—ã–≤: {review_text}\n\n'

            bot.send_message(message.chat.id, formatted_review)
# –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
if __name__ == "__main__":
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
